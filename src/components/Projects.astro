---
import Dropdown from './Dropdown.astro'

const { projects } = Astro.props as { projects: Project[] }

interface Filter {
  name: String
  items: Array<{ label: string; value: string }>
}

const filters = [
  {
    name: 'tech',
    items: [
      { label: 'All', value: '' },
      { label: 'Java', value: 'Java' },
      { label: 'Spring Boot', value: 'Spring Boot' },
      { label: 'Spigot API', value: 'Spigot API' },
      { label: 'Paper API', value: 'Paper API' },
      { label: 'WebSocket', value: 'WebSocket' },
    ],
  },
  {
    name: 'type',
    items: [
      { label: 'All', value: '' },
      { label: 'Plugin', value: 'Plugin' },
      { label: 'Backend', value: 'Backend' },
      { label: 'Management', value: 'Management' },
      { label: 'Service', value: 'Service' },
    ],
  },
  {
    name: 'sort',
    items: [
      { label: 'Newest', value: 'Newest' },
      { label: 'Oldest', value: 'Oldest' },
    ],
  },
]
---

<section class="flex flex-col mt-10">
  <h3
    class="text-xl font-light text-white text-center focus:border-0 focus:border-none"
  >
    Projects
  </h3>

  <div class="relative flex justify-center gap-3 lg:justify-end">
    {
      filters.map((filter: Filter) => (
        <Dropdown name={filter.name} items={filter.items} projects={projects} />
      ))
    }
  </div>

  <div
    class="grid gap-9 overflow-y-auto max-h-[500px] md:w-[800px]
        scrollbar-thin scrollbar-thumb-gray-500
        scrollbar-thumb-rounded-lg px-3"
    id="project-list"
  >
    {
      projects.map((project: Project) => (
        <article
          class="group project shrink-0 my-3 md:my-0 transition-all duration-300 ease-in-out w-full opacity-100 visible transform-gpu"
          data-project={project.title}
          data-techs={project.techs}
        >
          <div class="flex flex-col md:flex-row md:items-center justify-between gap-1">
            <h3 class="text-xl text-white">{project.title}</h3>
            <span class="text-balance text-sm text-gray-500 font-light">
              {project.techs}
            </span>
          </div>
          <p class="text-gray-400 text-sm leading-relaxed text-balance mt-2">
            {project.description}
          </p>
          <div class="flex justify-start items-center gap-3 mt-2">
            <a
              href={project.link}
              class="text-sm
            text-gray-500
            hover:text-white 
            transition-colors
            duration-300 
            inline-block
            border-b-2
            border-black
            hover:border-white"
              target="_blank"
              rel="noopener noreferrer"
            >
              view source
            </a>
            <span class="text-gray-500 text-sm">â€¢</span>
            <a
              href={project.link}
              class="text-sm
            text-gray-500
            hover:text-white 
            transition-colors
            duration-300 
            inline-block
            border-b-2
            border-black
            hover:border-white
            "
              target="_blank"
              rel="noopener noreferrer"
            >
              visit site
            </a>
          </div>
        </article>
      ))
    }
  </div>
</section>

<style>
  .project {
    transition: all 0.3s ease-in-out;
  }

  .project.hidden {
    opacity: 0;
    max-height: 0;
    margin: 0;
    padding: 0;
    pointer-events: none;
    overflow: hidden;
  }

  #project-list {
    grid-template-columns: 1fr;
    grid-auto-rows: min-content;
  }
</style>

<script
  is:inline
  define:vars={{ filters, projects } as {
    filters: Filter[]
    projects: Project[]
  }}
>
  filters.forEach((filter) => {
    const dropdownButton = document.getElementById(
      filter.name + '-dropdown-button',
    )
    const dropdownMenu = document.getElementById(filter.name + '-dropdown-menu')
    const dropdownIcon = document.getElementById(filter.name + '-dropdown-icon')

    dropdownButton.addEventListener('click', () => {
      const isHidden = dropdownMenu.classList.toggle('hidden')
      dropdownIcon.style.transform = isHidden
        ? 'rotate(0deg)'
        : 'rotate(180deg)'
      dropdownButton.setAttribute('aria-expanded', !isHidden)
    })

    document.addEventListener('click', (event) => {
      if (
        !dropdownButton.contains(event.target) &&
        !dropdownMenu.contains(event.target)
      ) {
        dropdownMenu.classList.add('hidden')
        dropdownIcon.style.transform = 'rotate(0deg)'
        dropdownButton.setAttribute('aria-expanded', 'false')
      }
    })

    filter.items.forEach((item) => {
      const button = document.getElementById(filter.name + '-' + item.value)
      button.addEventListener('click', () => {
        const projectList = document.getElementById('project-list')

        if (item.value === '' || item.value === 'All') {
          projectList.querySelectorAll('.project').forEach((project) => {
            project.classList.remove('hidden')
          })

          return
        }

        filter.items.forEach((item) => {
          const button = document.getElementById(filter.name + '-' + item.value)
          button.addEventListener('click', () => {
            const projectList = document.getElementById('project-list')

            projectList.querySelectorAll('.project').forEach((project) => {
              const projectData = project.getAttribute('data-techs')
              if (item.value === '' || item.value === 'All') {
                project.classList.remove('hidden')
              } else {
                const shouldHide = !projectData.includes(item.value)
                if (shouldHide) {
                  project.classList.add('hidden')
                } else {
                  project.classList.remove('hidden')
                }
              }
            })
          })
        })
      })
    })
  })
</script>
